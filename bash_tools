# Local activate helper
mae() {
  local env_name="${1:-ENV}"
  local env_path=""

  if [ -d "./$env_name" ]; then
    env_path="$(pwd)/$env_name"
  elif [ -d "../$env_name" ]; then
    env_path="$(cd .. && pwd)/$env_name"
  else
    echo "No environment '$env_name' found in current or parent directory."
    return 1
  fi

  if command -v micromamba &>/dev/null; then
    micromamba activate "$env_path"
  elif command -v mamba &>/dev/null; then
    mamba activate "$env_path"
  else
    echo "Neither micromamba nor mamba found in PATH."
    return 1
  fi
}

# fastfetch wrapper that allows specialisations to override binary and config
bc_ff() {
  local ff_bin="${FASTFETCH_BIN:-fastfetch}" # Use override if set, otherwise system
  local ff_config="${FASTFETCH_CONFIG:-}"

  # Check if fastfetch is installed
  if command -v "$ff_bin" &>/dev/null; then
    # Check if config file is set and exists
    if [[ -n "$ff_config" && -f "$ff_config" ]]; then
      # Run fastfetch with the specified config
      "$ff_bin" --config "$ff_config" 2>/dev/null
    else
      # Run fastfetch without a config file
      "$ff_bin" 2>/dev/null
    fi
  else
    # Echo error to stderr (>&2)
    # and return non-zero exit code to indicate failure
    echo "[fastfetch] binary not found: $ff_bin" >&2
    return 1
  fi
}

# Backward compatibility alias
ff() { bc_ff "$@"; }

# SSH agent management functions

# Check if a specific SSH key is loaded in the agent
bc_is_ssh_key_loaded() {
  local key_file="$1"
  if [[ -z "$key_file" || ! -f "$key_file" ]]; then
    return 1
  fi
  
  local key_fingerprint
  key_fingerprint=$(ssh-keygen -lf "$key_file" 2>/dev/null | awk '{print $2}')
  [[ -n "$key_fingerprint" ]] && ssh-add -l 2>/dev/null | grep -q "$key_fingerprint"
}

# Start a new SSH agent and save info to file
bc_start_ssh_agent() {
  local agent_file="$1"
  eval "$(ssh-agent -s)" >&2
  echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK; export SSH_AUTH_SOCK;" > "$agent_file"
  echo "SSH_AGENT_PID=$SSH_AGENT_PID; export SSH_AGENT_PID;" >> "$agent_file"
}

# Clean up orphaned SSH agents
bc_cleanup_ssh_agents() {
  local agent_file="${1:-$HOME/.ssh-agent-info}"
  local current_agents
  local stored_pid
  
  # Get currently stored agent PID
  if [[ -f "$agent_file" ]]; then
    stored_pid=$(grep "SSH_AGENT_PID=" "$agent_file" 2>/dev/null | cut -d'=' -f2 | tr -d ';')
  fi
  
  # Get all running ssh-agent processes
  mapfile -t current_agents < <(pgrep -u "$USER" ssh-agent 2>/dev/null)
  
  # Kill agents that aren't the stored one
  for pid in "${current_agents[@]}"; do
    if [[ -n "$stored_pid" && "$pid" != "$stored_pid" ]]; then
      kill "$pid" 2>/dev/null && echo "Cleaned up orphaned ssh-agent (PID: $pid)" >&2
    elif [[ -z "$stored_pid" ]]; then
      # No stored agent, kill all agents (will start fresh)
      kill "$pid" 2>/dev/null && echo "Cleaned up untracked ssh-agent (PID: $pid)" >&2
    fi
  done
}

# Setup SSH agent with key and cleanup
bc_setup_ssh_agent() {
  local key_file="$1"
  local agent_file="${2:-$HOME/.ssh-agent-info}"
  
  if [[ -z "$key_file" || ! -f "$key_file" ]]; then
    echo "SSH key file not found: $key_file" >&2
    return 1
  fi
  
  # Clean up orphaned agents first
  bc_cleanup_ssh_agents "$agent_file"
  
  # Check if we already have a running agent with the key loaded
  if ! ssh-add -l >/dev/null 2>&1 || ! bc_is_ssh_key_loaded "$key_file"; then
    
    # Try to find existing agent info
    if [[ -f "$agent_file" ]]; then
      source "$agent_file" >/dev/null
      if ssh-add -l >/dev/null 2>&1; then
        # Agent is running, add key if not already present
        if ! bc_is_ssh_key_loaded "$key_file"; then
          ssh-add "$key_file" >&2
        fi
      else
        # Agent not running or not accessible, clean up and start new one
        rm -f "$agent_file"
        bc_start_ssh_agent "$agent_file"
        ssh-add "$key_file" >&2
      fi
    else
      # No agent info file, start new agent
      bc_start_ssh_agent "$agent_file"
      ssh-add "$key_file" >&2
    fi
  fi
  
  # Set up cleanup on exit for interactive shells
  if [[ $- == *i* ]]; then
    bc_cleanup_ssh_agent_on_exit() {
      if [[ -f "$agent_file" && -n "$SSH_AGENT_PID" ]]; then
        local stored_pid
        stored_pid=$(grep "SSH_AGENT_PID=" "$agent_file" 2>/dev/null | cut -d'=' -f2 | tr -d ';')
        if [[ "$stored_pid" == "$SSH_AGENT_PID" ]]; then
          rm -f "$agent_file"
        fi
      fi
    }
    trap bc_cleanup_ssh_agent_on_exit EXIT
  fi
}

# Configuration validation function
bc_validate_config() {
  local issues=0
  
  echo "[Config Validation]"
  
  # Check BASH_CONFIG_DIR
  if [[ -n "${BASH_CONFIG_DIR:-}" && -d "$BASH_CONFIG_DIR" ]]; then
    echo "✅ Config directory found: $BASH_CONFIG_DIR"
  else
    echo "❌ Config directory missing or not set: ${BASH_CONFIG_DIR:-'(not set)'}"
    ((issues++))
  fi
  
  # Check specialization file exists
  if [[ -n "${BASH_SPECIALISATION:-}" ]]; then
    local spec_file="$BASH_CONFIG_DIR/specialisations/bashrc_$BASH_SPECIALISATION"
    if [[ -f "$spec_file" ]]; then
      echo "✅ Specialisation file found: $spec_file"
    else
      echo "❌ Specialisation file missing: $spec_file"
      ((issues++))
    fi
  else
    echo "ℹ️  No specialisation set"
  fi
  
  # Check fastfetch config
  if [[ -n "${FASTFETCH_CONFIG:-}" ]]; then
    if [[ -f "$FASTFETCH_CONFIG" ]]; then
      echo "✅ Fastfetch config found: $FASTFETCH_CONFIG"
    else
      echo "❌ Fastfetch config missing: $FASTFETCH_CONFIG"
      ((issues++))
    fi
  fi
  
  # Check fastfetch binary
  if [[ -n "${FASTFETCH_BIN:-}" ]]; then
    if command -v "$FASTFETCH_BIN" &>/dev/null; then
      echo "✅ Fastfetch binary found: $FASTFETCH_BIN"
    else
      echo "❌ Fastfetch binary not executable: $FASTFETCH_BIN"
      ((issues++))
    fi
  fi
  
  # Check secrets file
  local secrets_file="$BASH_CONFIG_DIR/secrets/bash_secrets.sh"
  if [[ -f "$secrets_file" ]]; then
    echo "✅ Secrets file found"
  else
    echo "⚠️  No secrets file (this may be intentional)"
  fi
  
  # Check SSH key if set
  if [[ -n "${DIAMOND_GITHUB_KEY:-}" ]]; then
    if [[ -f "$DIAMOND_GITHUB_KEY" ]]; then
      echo "✅ SSH key file found: $DIAMOND_GITHUB_KEY"
    else
      echo "❌ SSH key file missing: $DIAMOND_GITHUB_KEY"
      ((issues++))
    fi
  fi
  
  if [[ $issues -eq 0 ]]; then
    echo "✅ Configuration looks good!"
    return 0
  else
    echo "❗ Found $issues issue(s)"
    return 1
  fi
}

# Display configuration information
bc_info() {
  echo "Bash Configuration Information:"
  echo "  Version: ${BASH_CONFIG_VERSION:-'unknown'}"
  echo "  Directory: ${BASH_CONFIG_DIR:-'not set'}"
  echo "  Specialisation: ${BASH_SPECIALISATION:-'none'}"
  echo "  Host: $(hostname)"
  echo "  User: $USER"
  [[ -n "${FASTFETCH_BIN:-}" ]] && echo "  Fastfetch: $FASTFETCH_BIN"
  [[ -n "${FASTFETCH_CONFIG:-}" ]] && echo "  Fastfetch Config: $FASTFETCH_CONFIG"
}