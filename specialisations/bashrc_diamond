# Module system
# If version is not set, default to known good versions
CUDA_VERSION="${CUDA_VERSION:-12.6}"
CMAKE_VERSION="${CMAKE_VERSION:-4.0.2}"
# Load modules
module load cuda/"$CUDA_VERSION"
module load cmake/"$CMAKE_VERSION"

# Custom path
if [[ -n "${DIAMOND_USERNAME:-}" ]]; then
  [[ -d "/dls/science/users/$DIAMOND_USERNAME/.tmux_install/tmux_build/bin" ]] && \
    export PATH="/dls/science/users/$DIAMOND_USERNAME/.tmux_install/tmux_build/bin:$PATH"

  [[ -d "/home/$DIAMOND_USERNAME/.ninja/ninja" ]] && \
    export PATH="/home/$DIAMOND_USERNAME/.ninja/ninja:$PATH"

  export CONDA_PKGS_DIRS="/dls/science/users/$DIAMOND_USERNAME/.conda/pkgs"
fi

# SSH agent — start an empty agent for connection multiplexing (do not preload keys)
# Run only for interactive shells to avoid starting agents in non-interactive runs
if [[ $- == *i* ]]; then
  bc_setup_ssh_agent
fi

# SSH config setup (inform user if not configured)
if ! bc_check_ssh_config silent >/dev/null 2>&1; then
    bc_log_info "SSH config not set up, run 'ssh-setup' when ready to connect to work"
fi

# Hostname mapping
declare -A HOSTNAME_MAP=(
  ["cs05r-sc-serv-53.diamond.ac.uk"]="i03-gpu"
  ["cs05r-sc-serv-54.diamond.ac.uk"]="i24-gpu"
  ["cs05r-sc-gh-01.diamond.ac.uk"]="mx-gh"
  ["bl04j-sc-gh-01.diamond.ac.uk"]="i04-1-gpu"
  ["cs05r-sc-serv-11.diamond.ac.uk"]="bastion"
)
map_hostname() {
    local host="$1"
    echo "${HOSTNAME_MAP[$host]:-\h}"
}

# VSCode link check
check_vscode_links() {
  local base="/dls/science/users/$USER/.vscode_remote"
  local problems=0

  declare -A links=(
    ["~/.vscode-server/data/User/workspaceStorage"]="$base/workspaceStorage"
    ["~/.vscode-server/extensions"]="$base/extensions"
    ["~/.cache/Microsoft"]="$base/ms"
    ["~/.cache/vscode-cpptools"]="$base/vscode-cpptools"
    ["~/.vscode-server"]="$base/server"
  )

  echo "[VSCode Symlink Check]"

  for path in "${!links[@]}"; do
    local expanded_path expected_target actual_target
    expanded_path=$(eval echo "$path")
    expected_target="${links[$path]}"

    if [ -L "$expanded_path" ]; then
      actual_target=$(readlink -f "$expanded_path")
      if [ "$actual_target" = "$expected_target" ]; then
        echo "✅ $path -> $expected_target"
      else
        echo "⚠️  $path is a symlink, but points to $actual_target (expected $expected_target)"
        problems=1
      fi
    else
      echo "❌ $path is not a symlink (expected -> $expected_target)"
      problems=1
    fi
  done

  if [ "$problems" -eq 0 ]; then
    echo "✅ All VSCode paths are correctly linked."
  else
    echo "❗ One or more VSCode symlinks are missing or incorrect."
  fi
}

# Set fastfetch binary and config with validation
setup_fastfetch() {
  local ff_path="/dls/science/users/$USER/fastfetch/build/fastfetch"
  if [[ -x "$ff_path" ]]; then
    export FASTFETCH_BIN="$ff_path"
  else
    echo "[WARN] Custom fastfetch binary not found or not executable: $ff_path" >&2
    echo "[INFO] Falling back to system fastfetch" >&2
  fi
  export FASTFETCH_CONFIG="$BASH_CONFIG_DIR/configs/fastfetch_diamond.jsonc"
}

# Call the function
setup_fastfetch

# Diamond-specific aliases
alias cdu='cd "$DIAMOND_WORK_DIR"'
alias cdx='cd "$DIAMOND_SCRATCH_DIR"'